//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Dev/Stariluz/InputPlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Stariluz
{
    public partial class @InputPlayer: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputPlayer()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputPlayer"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""05529e56-6ebc-4cc6-ae73-d71984534bf8"",
            ""actions"": [
                {
                    ""name"": ""ChangeGravity"",
                    ""type"": ""Button"",
                    ""id"": ""23cdac13-e3a2-4ed9-b29c-03878bf084c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""72133826-4177-41ea-9d31-8cc955bc8698"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Float"",
                    ""type"": ""Button"",
                    ""id"": ""18b458bb-26d3-4888-80e1-ea7b8f8a7a1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlideEnd"",
                    ""type"": ""PassThrough"",
                    ""id"": ""28203892-f73f-445a-9eb1-6cf2d23c36e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd0db487-fb59-4233-bef0-255e69ec0685"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Slide Up"",
                    ""id"": ""bc644a5a-edcc-44f1-a9dc-77368aff36b0"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""7680a415-3312-46ee-9809-0756ab1122da"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""d532a86e-1948-4f89-bbde-ef19d8579ab7"",
                    ""path"": ""<Touchscreen>/delta/up"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.2,max=0.4)"",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Slide Down"",
                    ""id"": ""eec9e748-bdf6-4056-a97b-603d6b466b63"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""6e79cad0-a569-4ebc-9bac-20c23ac7605f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""8f90a25e-fd94-409b-9e9f-ec42645b9d03"",
                    ""path"": ""<Touchscreen>/delta/down"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.2,max=0.4)"",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cf3d40b2-def5-445e-a02b-479d87d62b23"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4de9a6f4-2713-4fcc-822b-02583a5c4d1a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4fbe59d-f20b-4063-ac21-359323703de2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Float"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a9e337d-39fd-4727-9665-a77e2abc0c8b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Float"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61914c7f-4ad0-467e-96d1-c64253aa6a7a"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlideEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_ChangeGravity = m_Gameplay.FindAction("ChangeGravity", throwIfNotFound: true);
            m_Gameplay_Teleport = m_Gameplay.FindAction("Teleport", throwIfNotFound: true);
            m_Gameplay_Float = m_Gameplay.FindAction("Float", throwIfNotFound: true);
            m_Gameplay_SlideEnd = m_Gameplay.FindAction("SlideEnd", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_ChangeGravity;
        private readonly InputAction m_Gameplay_Teleport;
        private readonly InputAction m_Gameplay_Float;
        private readonly InputAction m_Gameplay_SlideEnd;
        public struct GameplayActions
        {
            private @InputPlayer m_Wrapper;
            public GameplayActions(@InputPlayer wrapper) { m_Wrapper = wrapper; }
            public InputAction @ChangeGravity => m_Wrapper.m_Gameplay_ChangeGravity;
            public InputAction @Teleport => m_Wrapper.m_Gameplay_Teleport;
            public InputAction @Float => m_Wrapper.m_Gameplay_Float;
            public InputAction @SlideEnd => m_Wrapper.m_Gameplay_SlideEnd;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @ChangeGravity.started += instance.OnChangeGravity;
                @ChangeGravity.performed += instance.OnChangeGravity;
                @ChangeGravity.canceled += instance.OnChangeGravity;
                @Teleport.started += instance.OnTeleport;
                @Teleport.performed += instance.OnTeleport;
                @Teleport.canceled += instance.OnTeleport;
                @Float.started += instance.OnFloat;
                @Float.performed += instance.OnFloat;
                @Float.canceled += instance.OnFloat;
                @SlideEnd.started += instance.OnSlideEnd;
                @SlideEnd.performed += instance.OnSlideEnd;
                @SlideEnd.canceled += instance.OnSlideEnd;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @ChangeGravity.started -= instance.OnChangeGravity;
                @ChangeGravity.performed -= instance.OnChangeGravity;
                @ChangeGravity.canceled -= instance.OnChangeGravity;
                @Teleport.started -= instance.OnTeleport;
                @Teleport.performed -= instance.OnTeleport;
                @Teleport.canceled -= instance.OnTeleport;
                @Float.started -= instance.OnFloat;
                @Float.performed -= instance.OnFloat;
                @Float.canceled -= instance.OnFloat;
                @SlideEnd.started -= instance.OnSlideEnd;
                @SlideEnd.performed -= instance.OnSlideEnd;
                @SlideEnd.canceled -= instance.OnSlideEnd;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        public interface IGameplayActions
        {
            void OnChangeGravity(InputAction.CallbackContext context);
            void OnTeleport(InputAction.CallbackContext context);
            void OnFloat(InputAction.CallbackContext context);
            void OnSlideEnd(InputAction.CallbackContext context);
        }
    }
}
